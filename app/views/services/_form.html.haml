= simple_form_for @service, url: @service.id.nil? ? services_path : service_path,
method: @service.id.nil? ? 'post' : 'put', html: { class: 'form-horizontal' },
wrapper: :horizontal_form do |f|
  .row
    .col-sm-6.pull-left
      %h2
        = f.input :name
    .col-sm-6.pull-right
      .row
        .col-sm-6.pull-right
          - if can? :update, @service
            = button_tag type: 'submit', class: "btn action-button default" do
              = icon_label(:apply)
            = link_to service_path(@service), {class: 'btn action-button pull-right', role: 'button'} do
              = icon_label(:cancel)

  .well
    .row
      .col-sm-4
        %h3
          = t(:provided_by)
          =  @service.provider.name
        - unless @service.active
          %h3.warning
            = t(:service_is_inactive)
        = f.input :phone
        = f.input :email
        = f.input :url
      .col-sm-4
        = f.input :external_id, label: t(:service_id)
        = f.input :booking_service_code
        = f.input :service_window, as: :integer
        = f.input :time_factor, as: :float
        
      .col-sm-4
        %h4= t(:internal_contact)
        = f.input_field :internal_contact, collection: @staff, 
                selected: (@contact.id if @contact) , include_blank: "None"

  .row
    .col-sm-4
      .well.well2
        %h4= t(:schedule)
        %table.ALTtable
          %thead
            %tr
              %th.text-center
                = t('datetime.prompts.day')
              %th.text-center
                = t(:start_time)
              %th.text-center
                = t(:end_time)
              %th.text-center
                Clear?
          %tbody
            - # display each day of week, Monday 1st, Sunday last
            - count = 0
            - (1..7).each do |i|
              - day_of_week = i % 7
              - schedule = @schedules[day_of_week]
              %tr
                %td.text-center
                  = t('date.day_names')[day_of_week]
                %td
                  %input.form-control.text-right{type: "text",
                        value: "#{schedule.start_time if schedule}",
                        name: input_name(f, :schedules, :start_time)}
                %td
                  %input.form-control.text-right{type: "text",
                        value: "#{schedule.end_time if schedule}",
                        name: "service[schedules_attributes][][end_time]"}
                %td
                  %input.form-control.checkbox{type: "checkbox",
                        value: "1", name: "service[schedules_attributes][][_destroy]"}
                - if schedule
                  %input{type: "hidden", value: "#{schedule.id}",
                         name: "service[schedules_attributes][][id]"}
                - else
                  %input{type: "hidden", value: "#{day_of_week}",
                         name: "service[schedules_attributes][][day_of_week]"}
                
    .col-sm-4
      .well.well2
        %h4= t(:advance_notice_required)
        .well.white-well.wwell2
          - minutes_total = @service.advanced_notice_minutes
          -if minutes_total > 0
            = t(:service_notice_required) + " " ## TODO Interpolate
            %input.text-right{type: "number", min: 0, max: 30,
                value: minutes_total / (60 * 24),
                name: "service[notice_days_part]"}
            %b days, 
            %input.text-right{type: "number", min: 0, max: 23,
                value: (minutes_total / 60) % 24,
                name: "service[notice_hours_part]"}
            %b hours, 
            %input.text-right{type: "number", min: 0, max: 59,
                value: minutes_total % 60,
                name: "service[notice_minutes_part]"}
            %b minutes 
            = " " + t(:service_notice_str) + "."
          -else
            =t(:service_notice_not_required) + "."
    .col-sm-4
      .well.well2
        %h4=t(:accommodations)
        .well.white-well.wwell1
          = f.association :accommodations,
                collection: Accommodation.all.map{|a| [ t(a.name), a.id ] }, label: false,
                input_html: { size: Accommodation.count }
  .row
    .col-sm-4
      .well.well1
        %h4= t(:eligibility)
        = t(:eligibility_rules_descr)
        .well.white-well.wwell1
          %h4 Add new rules
          %table.ALTtable
            %thead
              %tr
                %th.text-center
                  &nbsp;Add&nbsp;
                %th.text-center
                  Group
                %th.text-center
                  Rule
            %tbody
              - Characteristic.enabled.each do |c|
                %tr
                  %td.text-center
                    %input{type: "hidden", name: input_name(f, :service_characteristics, :id)}
                    = check_box_tag input_name(f, :service_characteristics, :active),
                        true, false, class: "form-control checkbox"
                    %input{type: "hidden", value: "#{c.id}",
                        name: input_name(f, :service_characteristics, :characteristic_id)}
                  %td.text-center
                    = select_tag(input_name(f, :service_characteristics, :group),
                      options_for_select((0..Characteristic.enabled.count).map{|id| ["#{id}", id]}))
                  %td.text-center
                    = t(c.name)
                    - case c.datatype
                    -   when 'bool'
                      = " is "
                      = select_tag(input_name(f, :service_characteristics, :value),
                        options_for_select([['true', 'true'], ['false', 'false']]))
                    -   when 'integer', 'date'
                      = select_tag(input_name(f, :service_characteristics, :value_relationship_id),
                        options_for_select(@eh.operator_select_options, 4))
                      %input.text-right{type: "number", min: 1, max: 120,
                        name: input_name(f, :service_characteristics, :value)}
                    
          %h4 Modify existing rules
          %table.ALTtable
            %thead
              %tr
                %th.text-center
                  Delete
                %th.text-center
                  &nbsp;Group&nbsp;
                %th.text-center
                  Rule
            %tbody
            - groups = @service.service_characteristics.map(&:group).uniq
            - groups.each do |group|
              - join_string = ''
              - @service.service_characteristics.where(group: group).each do |map|
                %tr
                  %td
                    %input{type: "hidden", value: "#{map.id}",
                      name: input_name(f, :service_characteristics, :id)}
                    %input.form-control.checkbox{type: "checkbox",
                        value: "1", 
                        name: input_name(f, :service_characteristics, :_destroy)}
                    %input{type: "hidden", value: "#{map.characteristic.id}",
                        name: input_name(f, :service_characteristics, :characteristic_id)}
                    %input{type: "hidden", value: "true",
                        name: input_name(f, :service_characteristics, :active)}

                  %td.text-center
                    = group
                  %td
                    = join_string
                    - join_string = ' AND '
                    = t(map.characteristic.name)
                    - case map.characteristic.datatype
                    -   when 'bool'
                      = " is "
                      = select_tag(input_name(f, :service_characteristics, :value),
                        options_for_select([['true', 'true'], ['false', 'false']], map.value))
                    -   when 'integer', 'date'
                      = select_tag(input_name(f, :service_characteristics, :value_relationship_id),
                        options_for_select(@eh.operator_select_options, map.value_relationship_id))
                      %input.text-right{type: "number", min: 1, max: 120, value: map.value,
                        name: input_name(f, :service_characteristics, :value)}
                  
    .col-sm-4
      .well.well1
        %h4= t(:trip_purposes)
        .well.white-well.wwell1
          = f.association :trip_purposes,
                collection: TripPurpose.all.map{|p| [ t(p.name), p.id ] }, label: false,
                input_html: { size: TripPurpose.count }

    .col-sm-4
      .well.well1 
        %h4= t(:fare)
        = f.simple_fields_for :fare_structures do |fare|
          .well.white-well.wwell2
            .row_fluid
              = fare.input :base, as: :currency
              = fare.input :rate, as: :currency
              = fare.input :desc, label: t(:comments), as: :text
              
  .well
    .row.text-center
      .col-sm-12
        %h3= t(:coverage_areas)

    .row
      .col-sm-6
        -types = @service.coverage_areas.map(&:coverage_type).uniq
      - ['origins', 'destinations', 'residences'].each do |rule| 
        %h4= t(rule)
        - types.each do |type|
          %b
            =type.humanize.split[0].pluralize + ' ' + t(:served_areas)
          .well.white-well.text-left
            -coverage_string = ""
            -@service.service_coverage_maps.where(rule: rule.singularize.downcase).each do |map|
              -if map.geo_coverage.coverage_type == type
                -coverage_string += map.geo_coverage.value + ', '
            -if coverage_string == ""
              = t(:n_a)
            -else
              =coverage_string.chop.chop

