.row-fluid
  .thumbnail.span12
    -if current_user  
      = render 'select_traveler_form' unless current_user.travelers.empty?
      
    = form_for :trip_proxy, :url => user_trips_path do |f|
      = f.hidden_field :from_place_selected
      = f.hidden_field :to_place_selected
      = f.hidden_field :from_place_selected_type
      = f.hidden_field :to_place_selected_type
      
      .control-group
        %label.control-label= t(:from)
        .controls.controls-row.span12
          - if user_signed_in?
            .input-append
              = f.text_field :from_place, :id => "from_address", :class => "span11", :placeholder => t(:select_or_enter_address)
              %span.dropdown
                %a.add-on.btn.dropdown-toggle{:data => {:toggle => 'dropdown'}, :href => '#'}>
                  %span.caret
                %ul.dropdown-menu{:data => {:target => 'from_address'}}
                  - @traveler.places.each do |p|
                    %li
                      %a.place-option{:data => {:value => p.name, :id => p.id, :latlon => [p.lat, p.lon], :type => "from"}}
                        = p.name          
          - else
            = f.text_field :from_place, :class => "span12", :placeholder => t(:enter_address)

          = render :partial => 'alt_address_select', :locals => {:results => @trip_proxy.from_place_results, :type => "from"} unless @trip_proxy.from_place.blank?
          
      .control-group
        %label.control-label= t(:to)
        .controls.controls-row.span12
          - if user_signed_in?
            .input-append
              = f.text_field :to_place, :id => "to_address", :class => "span11", :placeholder => t(:select_or_enter_address)
              %span.dropdown
                %a.add-on.btn.dropdown-toggle{:data => {:toggle => 'dropdown'}, :href =>'#'}>
                  %span.caret
                %ul.dropdown-menu{:data => {:target => 'to_address'}}
                  - @traveler.places.each do |p|
                    %li
                      %a.place-option{:data => {:value => p.name, :id => p.id, :latlon => [p.lat, p.lon], :type => "to"}}
                        = p.name          
          - else
            = f.text_field :to_place, :class => "span12", :placeholder => t(:enter_address)

          = render :partial => 'alt_address_select', :locals => {:results => @trip_proxy.to_place_results, :type => "to"} unless @trip_proxy.to_place.blank?

      .control-group
        %label.control-label Traveling on
        .controls
          .input-append
            = f.text_field :trip_date, :id => "trip-date"
            %span.add-on
              %i.icon.icon-calendar
        
      .control-group
        .controls.controls-row
          = select_tag :arrive_depart, options_for_select(["departing at", "arriving by"])

          .input-append
            = f.text_field :trip_time, :id => "trip-time"
            %span.add-on
              %i.icon.icon-time
                  
      .actions
        = button_tag :type => 'submit', :class => "btn btn-block btn-primary" do
          %i{class: "icon #{CsHelpers::ACTION_ICONS[:plan_a_trip]}"}
          = t(:plan_it)
        = link_to t(:cancel), :back
                
:javascript
  $('#trip-date').datepicker().on("dateChange", function(e) {
      $('#trip_proxy_trip_date').val(Date.format(e.date, "mm/dd/yyyy"));
  })
  ;
  $('#trip-time').timepicker({
    'timeFormat': 'g:i a',
    'scrollDefaultTime': '9:00 am'
  }).on("changeTime", function(e) {
      $('#trip_proxy_trip_time').val($('#trip-time').data('ui-timepicker-value'));
    });
    
  $(document).ready(function(){
      $('.combobox').combobox({
        force_match: false
      });
    
    add_place_markers(from_places, 'greenIcon');
    add_place_markers(to_places, 'blueIcon');
    setMapToBounds(address_candidate_markers);
  });
  
  $('.dropdown-toggle').dropdown();
  
  $('.place-option').on('click', function(event) {
    var t = $(event.target);
    var id = t.data('id');
    var from_to = t.data('type');
    if (from_to == 'from') {
      $('#trip_proxy_from_place_selected').val(id);
      $('#trip_proxy_from_place_selected_type').val(1);
    } else {
      $('#trip_proxy_to_place_selected').val(id);
      $('#trip_proxy_to_place_selected_type').val(1);
    }
    $('#' + t.parents('ul').data('target')).val(t.data('value'));
  });

  // Cache the alt places
  var from_places = eval("#{escape_javascript @trip_proxy.from_place_results.to_json}"); 
  var to_places = eval("#{escape_javascript @trip_proxy.to_place_results.to_json}");
  
  // Add listeners to show the selected address.
  $('.address_select').click(function() {
    var id = $(this).data('id');
    var from_to = $(this).data('type');
    var decorator_class;
    if (from_to == 'from') {
      $('#trip_proxy_from_place_selected').val(id);
      $('#trip_proxy_from_place_selected_type').val(0);
      decorator_class = 'alert-success';
    } else {
      $('#trip_proxy_to_place_selected').val(id);
      $('#trip_proxy_to_place_selected_type').val(0);
      decorator_class = 'alert-info';
    }
    // remove any decorators for this class
    $('li').removeClass(decorator_class);
    $(this).addClass(decorator_class);
    selectMarker(address_candidate_markers[id]);    
  });
    
  function add_place_markers(markers, iconStyle) {
    for (var i = 0; i < markers.length; i++) {
      create_place_marker(markers[i], iconStyle);
    }
  };
  
  function create_place_marker(addr, iconStyle) {
    marker = createMarker(addr.id, addr.lat, addr.lon, iconStyle, addr.formatted_address, addr.formatted_address, true);
    address_candidate_markers.push(marker);
    addMarkerToMap(marker);    
  };
