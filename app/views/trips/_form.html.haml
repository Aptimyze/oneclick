.row-fluid
  .thumbnail.span12
    = form_for :trip_proxy, :url => user_trips_path do |f|
      = f.hidden_field :from_place_selected
      = f.hidden_field :to_place_selected
      
      .control-group
        %label.control-label= t(:from)
        .controls.controls-row
          = f.text_field :from_place, :class => "span12", :placeholder => t(:enter_address)
          = render :partial => 'alt_address_select', :locals => {:results => @trip_proxy.from_place_results, :type => "from"}
          
      .control-group
        %label.control-label= t(:to)
        .controls.controls-row
          = f.text_field :to_place, :class => "span12", :placeholder => t(:enter_address)
          = render :partial => 'alt_address_select', :locals => {:results => @trip_proxy.to_place_results, :type => "to"}

      .control-group
        %label.control-label Traveling
        .controls.controls-row
          .input-append
            = f.text_field :trip_date, :id => "trip-date"
            %span.add-on
              %i.icon.icon-calendar
        
            = select_tag :arrive_depart, options_for_select(["departing at", "arriving by"])

          .input-append
            = f.text_field :trip_time, :id => "trip-time"
            %span.add-on
              %i.icon.icon-time
                  
      .actions
        = f.submit t(:plan_it), {class: 'btn btn-primary controls'}
        = link_to t(:cancel), :back
                
:javascript
  $(document).ready(function(){
    $('#trip-date').datepicker()
      .on("dateChange", function(e) {
        $('#trip_proxy_trip_date').val(Date.format(e.date, "mm/dd/yyyy"));
      });
    $('#trip-date').data("calendar").setDate(new Date());
    $('#trip_proxy_trip_time').timepicker({
      'timeFormat': 'g:i a',
      'scrollDefaultNow': true
    })
    $('#trip-time .add-on').on('click', function() {
      $('#trip_proxy_trip_time').timepicker('show');
    });
    $('.combobox').combobox({
      force_match: false
    });
    
    add_place_markers(from_places, 'greenIcon');
    add_place_markers(to_places, 'blueIcon');
    setMapToBounds(address_candidate_markers);
  });
  
  $('.dropdown-toggle').dropdown();
  
  $('.trip_proxy_from_place_address a, .trip_proxy_to_place_address a').on('click', function(event) {
  var t = $(event.target)
    if (t.hasClass('place-option')) {
      $('#' + t.parents('ul').data('target')).val(t.data('value'))
    }
  });

  // Cache the alt places
  var from_places = eval("#{escape_javascript @trip_proxy.from_place_results.to_json}"); 
  var to_places = eval("#{escape_javascript @trip_proxy.to_place_results.to_json}");
  
  // Add listeners to show the selected address
  $('.address_select').click(function() {
    var id = $(this).data('id');
    var from_to = $(this).data('type');
    var decorator_class;
    if (from_to == 'from') {
      $('#trip_proxy_from_place_selected').val(id);
      decorator_class = 'alert-success';
    } else {
      $('#trip_proxy_to_place_selected').val(id);
      decorator_class = 'alert-info';
    }
    // remove any decorators for this class
    $('li').removeClass(decorator_class);
    $(this).addClass(decorator_class);
    selectMarker(address_candidate_markers[id]);    
  });
    
  function add_place_markers(markers, iconStyle) {
    for (var i = 0; i < markers.length; i++) {
      create_place_marker(markers[i], iconStyle);
    }
  };
  
  function create_place_marker(addr, iconStyle) {
    marker = createMarker(addr.id, addr.lat, addr.lon, iconStyle, addr.formatted_address, addr.formatted_address, true);
    address_candidate_markers.push(marker);
    addMarkerToMap(marker);    
  };
