.row-fluid
  .thumbnail.span12
    -if current_user  
      = render 'select_traveler_form' unless current_user.travelers.empty?
      
    = form_for :trip_proxy, :url => user_trips_path do |f|
      = f.hidden_field :from_place_selected
      = f.hidden_field :to_place_selected
      = f.hidden_field :from_place_selected_type
      = f.hidden_field :to_place_selected_type
      
      .control-group
        %label.control-label= t(:from)
        .controls.controls-row
          - if user_signed_in?
            .input-append.span12
              = f.text_field :from_place, :id => "from_address", :class => "span11", :placeholder => t(:select_or_enter_address)
              %span.dropdown
                %a.add-on.btn.dropdown-toggle{:data => {:toggle => 'dropdown'}, :href => '#'}>
                  %span.caret
                %ul.dropdown-menu{:data => {:target => 'from_address'}}
                  - @traveler.places.each do |p|
                    %li
                      %a.place-option{:data => {:value => p.name, :id => p.id, :latlon => [p.lat, p.lon], :type => "from"}}
                        = p.name          
          - else
            = f.text_field :from_place, :class => "span12", :placeholder => t(:enter_address)

          = render :partial => 'alt_address_select', :locals => {:results => @trip_proxy.from_place_results, :type => "from"} unless @trip_proxy.from_place.blank? || @trip_proxy.from_place_selected_type == "1"
          
      .control-group
        %label.control-label= t(:to)
        .controls.controls-row
          - if user_signed_in?
            .input-append.span12
              = f.text_field :to_place, :id => "to_address", :class => "span11", :placeholder => t(:select_or_enter_address)
              %span.dropdown
                %a.add-on.btn.dropdown-toggle{:data => {:toggle => 'dropdown'}, :href =>'#'}>
                  %span.caret
                %ul.dropdown-menu{:data => {:target => 'to_address'}}
                  - @traveler.places.each do |p|
                    %li
                      %a.place-option{:data => {:value => p.name, :id => p.id, :latlon => [p.lat, p.lon], :type => "to"}}
                        = p.name          
          - else
            = f.text_field :to_place, :class => "span12", :placeholder => t(:enter_address)

          = render :partial => 'alt_address_select', :locals => {:results => @trip_proxy.to_place_results, :type => "to"} unless @trip_proxy.to_place.blank? || @trip_proxy.to_place_selected_type == "1"

      .control-group
        %label.control-label Traveling on
        .controls
          .input-append
            = f.text_field :trip_date, :id => "trip-date"
            %span.add-on
              %i.icon.icon-calendar
        
      .control-group
        .controls.controls-row
          = select_tag :arrive_depart, options_for_select(["departing at", "arriving by"])

          .input-append
            = f.text_field :trip_time, :id => "trip-time"
            %span.add-on
              %i.icon.icon-time
                  
      .actions
        = button_tag :type => 'submit', :class => "btn btn-block btn-primary" do
          %i{class: "icon #{CsHelpers::ACTION_ICONS[:plan_a_trip]}"}
          = t(:plan_it)
                
:javascript
  $('#trip-date').datepicker().on("dateChange", function(e) {
      $('#trip_proxy_trip_date').val(Date.format(e.date, "mm/dd/yyyy"));
  })
  ;
  $('#trip-time').timepicker({
    'timeFormat': 'g:i a',
    'scrollDefaultTime': '9:00 am'
  }).on("changeTime", function(e) {
      $('#trip_proxy_trip_time').val($('#trip-time').data('ui-timepicker-value'));
    });
    
  $(document).ready(function(){
    $('.combobox').combobox({
      force_match: false
    });
   
    $("#trip_proxy_traveler").addClass('span12');

    // Add two null makrers to the array
    address_candidate_markers << null;
    address_candidate_markers << null;    
  });
  
  $('.dropdown-toggle').dropdown();
  
  // User has selected a pre-defined place from the dropdown.
  $('.place-option').on('click', function(event) {
    var t = $(event.target);
    var id = t.data('id');
    var from_to = t.data('type');
    var latlon = eval(t.data('latlon'));
    var name = t.data('value');
    var iconStyle = 'greenIcon';
    var index = 0;
    if (from_to == 'from') {
      $('#trip_proxy_from_place_selected').val(id);
      $('#trip_proxy_from_place_selected_type').val(1);
    } else {
      $('#trip_proxy_to_place_selected').val(id);
      $('#trip_proxy_to_place_selected_type').val(1);
      iconStyle = 'blueIcon';
      index = 1;
    }
    var marker = create_or_update_marker(index, id, latlon[0], latlon[1], name, iconStyle);
    selectMarker(marker);
    $('#' + t.parents('ul').data('target')).val(name);
  });

  // Cache the alt places
  var from_places = eval("#{escape_javascript @trip_proxy.from_place_results.to_json}"); 
  var to_places = eval("#{escape_javascript @trip_proxy.to_place_results.to_json}");
  
  // Add cahnge listeners on the text fields
  $("#from_address").bind("keyup input paste", function() {
    $('#trip_proxy_from_place_selected').val("");
    $('#trip_proxy_from_place_selected_type').val("");    
  });
  // Add cahnge listeners on the text fields
  $("#to_address").bind("keyup input paste", function() {
    $('#trip_proxy_to_place_selected').val("");
    $('#trip_proxy_to_place_selected_type').val("");    
  });
    
  // Add listeners to show the selected address when the user clicks on one
  $('.address_select').click(function() {
    var id = $(this).data('id');
    var from_to = $(this).data('type');
    var decorator_class = 'alert-success';
    var index = 0;
    var iconStyle = 'greenIcon';
    var marker_array = from_places;
    if (from_to == 'from') {
      $('#trip_proxy_from_place_selected').val(id);
      $('#trip_proxy_from_place_selected_type').val(0);
    } else {
      $('#trip_proxy_to_place_selected').val(id);
      $('#trip_proxy_to_place_selected_type').val(0);
      iconStyle = 'blueIcon';
      marker_array = to_places;
      decorator_class = 'alert-info';
      index = 1;
    }
    // remove any decorators for this class
    $('li').removeClass(decorator_class);
    $(this).addClass(decorator_class);
    // Get the address from the marker array and create a map marker
    var addr = marker_array[id];
    var marker = create_or_update_marker(index, addr.id, addr.lat, addr.lon, addr.formatted_address, iconStyle);
    selectMarker(marker);
  });
      
  function create_or_update_marker(index, id, lat, lon, name, iconStyle) {
    // Remove the current marker from the map if it already exists
    if (address_candidate_markers[index]) {
      removeMarkerFromMap(address_candidate_markers[index]);
    }
    marker = create_place_marker(id, lat, lon, name, iconStyle);
    address_candidate_markers[index] = marker;
    addMarkerToMap(marker);
    return marker;
  };
  
  function create_place_marker(id, lat, lon, name, iconStyle) {
    marker = createMarker(id, lat, lon, iconStyle, name, name, true);
    return marker;  
  };

  function create_address_marker(addr, iconStyle) {
    create_place_marker(addr.id, addr.lat, addr.lon, addr.formatted_address, iconStyle);
  };
